package main

import (
	"fmt"
	"math"

	"github.com/HaraldWik/go-game-2/scr/app"
	dt "github.com/HaraldWik/go-game-2/scr/data-types"
	"github.com/HaraldWik/go-game-2/scr/input"
	sys "github.com/HaraldWik/go-game-2/scr/systems"
	"github.com/HaraldWik/go-game-2/scr/ups"
	vec2 "github.com/HaraldWik/go-game-2/scr/vector/2"
	vec3 "github.com/HaraldWik/go-game-2/scr/vector/3"
)

func main() {
	app := app.New()
	win := app.NewWindow("Window!!!", vec2.New(1920, 1075))
	win.Flags = win.FLAG_RESIZABLE
	win.Open()
	/* 2D */
	ups.NewObject(
		"Camera2D",
		ups.Data{
			"Window":    win,
			"Transform": dt.NewTransform2D(vec2.New(0.0, 10.0), vec2.All(1.0), 0.0),
			"Zoom":      float32(10),

			"Speed": float32(0.1),

			"Color":    vec3.All(0.5),
			"Segments": uint32(30),
		},
		[]ups.System{
			sys.Camera2D{},
			Zoom{},
			Controller2D{},

			sys.RenderCircle2D{},
		},
	)

	ups.NewObject(
		"Circle",
		ups.Data{
			"Color":     vec3.New(1.0, 0.5, 0.0),
			"Transform": dt.NewTransform2D(vec2.New(5.0, 80), vec2.All(1.0), 0.0),
			"Segments":  uint32(30),
		},
		[]ups.System{
			sys.RenderCircle2D{},

			sys.Physics2D{},
		},
	)

	ups.NewObject(
		"Triangle",
		ups.Data{
			"Color":     vec3.New(1.0, 0.0, 0.0),
			"Transform": dt.NewTransform2D(vec2.New(-5.0, 25.0), vec2.New(1.0, 3.0), 0.0),
		},
		[]ups.System{
			sys.RenderTriangle2D{},

			sys.Physics2D{},
		},
	)

	ups.NewObject(
		"Triangle2",
		ups.Data{
			"Color":     vec3.New(1.0, 0.0, 1.0),
			"Transform": dt.NewTransform2D(vec2.New(5.0, 25.0), vec2.New(1.0, 3.0), 0.0),
		},
		[]ups.System{
			sys.RenderTriangle2D{},

			sys.Physics2D{},
		},
	)

	ups.NewObject(
		"Rectangle",
		ups.Data{
			"Color":     vec3.New(0.0, 1.0, 0.0),
			"Transform": dt.NewTransform2D(vec2.New(0.0, -10.0), vec2.All(4.0), 0.0),
		},
		[]ups.System{
			sys.RenderRectangle2D{},
			ColorFlip{},

			sys.Physics2D{},
		},
	)

	ups.NewObject(
		"TRI",
		ups.Data{
			"Color":     vec3.New(0.0, 1.0, 0.0),
			"Transform": dt.NewTransform2D(vec2.New(0.0, -10.0), vec2.All(4.0), 0.0),
		},
		[]ups.System{
			sys.RenderTriangle2D{},

			sys.Physics2D{},
			Test{},
		},
	)

	ups.NewObject(
		"Ground",
		ups.Data{
			"Color":     vec3.New(0.0, 1.0, 0.0),
			"Transform": dt.NewTransform2D(vec2.New(0, 0), vec2.New(100.0, 1.0), 0.0),
		},
		[]ups.System{
			sys.RenderRectangle2D{},
			Test{},
		},
	)

	/* 3D
	ups.NewObject(
		"Camera3D",
		ups.Data{
			"Window":    win,
			"Transform": dt.NewTransform3D(vec3.New(0.0, 0.0, 0.0), vec3.All(1.0), vec3.New(0.0, 45.0, 0.0)),
			"Fov":       float32(50),
		},
		[]ups.System{
			sys.Camera3D{},
		},
	)

	ups.NewObject(
		"Cube3D",
		ups.Data{
			"Color":     vec3.All(1.0),
			"Transform": dt.NewTransform3D(vec3.New(0.0, 0.0, -10.0), vec3.All(0.1), vec3.New(45.0, 45.0, 45.0)),
		},
		[]ups.System{
			sys.RenderCube3D{},
			Jump{},
		},
	)
	*/

	for !win.CloseEvent() {
		win.BeginDraw(vec3.New(0.0, 0.144, 0.856))

		ups.Manager.Update(win.GetDeltaTime())

		win.EndDraw(60)
	}
}

type Test struct{}

func (t Test) Start() {}

func (t Test) Update(deltaTime float32) {
	var (
		obj = ups.Manager.GetParent()
	)

	obj.AddTags("PP")

	fmt.Println(ups.Manager.FindTag("PP"))
}

type Jump struct{}

func (j Jump) Start() {}

func (j Jump) Update(deltaTime float32) {
	var (
		obj       = ups.Manager.GetParent()
		transform = obj.Data.Get("Transform").(dt.Transform3D)
	)

	const interpolationSpeed = 0.1 // How fast the value should interpolate

	// Update the target position based on sine wave
	targetY := float32(math.Sin(float64(deltaTime * 10)))

	// Smooth interpolation
	transform.Pos.Y = Lerp(transform.Pos.Y, targetY, interpolationSpeed)

	obj.Data.Set("Transform", transform)
}

func Lerp(a, b, t float32) float32 {
	return a + t*(b-a)
}

type ColorFlip struct{}

func (c ColorFlip) Start() {
	var (
		obj   = ups.Manager.GetParent()
		color = obj.Data.Get("Color").(vec3.Type)
	)

	var new vec3.Type
	new.X = color.Z
	new.Y = color.X
	new.Z = color.Y

	obj.Data.Set("Color", new)
}

func (c ColorFlip) Update(deltaTime float32) {}

type Zoom struct{}

func (z Zoom) Start() {}

func (z Zoom) Update(deltaTime float32) {
	var (
		obj  = ups.Manager.GetParent()
		zoom = obj.Data.Get("Zoom").(float32)
	)

	if input.IsPressed(input.K_UP) {
		zoom += 0.1
	}
	if input.IsPressed(input.K_DOWN) {
		zoom -= 0.1
	}

	obj.Data.Set("Zoom", zoom)
}

type Controller2D struct{}

func (c Controller2D) Start() {}

func (c Controller2D) Update(deltaTime float32) {
	var (
		obj       = ups.Manager.GetParent()
		transform = obj.Data.Get("Transform").(dt.Transform2D)
		speed     = obj.Data.Get("Speed").(float32)
	)
	if input.IsPressed(input.K_W) {
		transform.Pos.Y += speed * deltaTime
	}
	if input.IsPressed(input.K_S) {
		transform.Pos.Y -= speed * deltaTime
	}

	if input.IsPressed(input.K_D) {
		transform.Pos.X += speed * deltaTime
	}
	if input.IsPressed(input.K_A) {
		transform.Pos.X -= speed * deltaTime
	}

	if input.IsPressed(input.K_SHIFT) {
		speed = 10.0
	} else {
		speed = 5.0
	}

	obj.Data.Set("Speed", speed)
	obj.Data.Set("Transform", transform)
}
